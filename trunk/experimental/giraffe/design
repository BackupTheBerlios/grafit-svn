Framework:

class HasSignals:
    emit(signal, *args, **kwds)
    connect(signal, slot)
    disconnect(signal, slot)

class Command:
    static undo_list
    do()
    undo()
    combine(command)
    register()

    signal 'done'
    signal 'undone'

class UndoList:
    append(command)
    begin_composite(command)
    end_composite()
    clear()
    undo()
    redo()
    enable()
    disable()

    signal 'added', command
    signal 'removed', command
    signal 'enabled'
    signal 'disabled'

Should we give commands uuid's?

class Object:
    __init__(folder)

    move(newfolder)

    save()
    load(element)
    
    name
    make_name
    
    signal 'renamed', oldname, newname
    signal 'modified'

Objects exist only in folders.
References between objects are always relative to the current folder.
Objects can only reference objects in the current folder and subfolders, but _not_ parent folders.
That way, you can move and save (only) folders independently. The only check is, when deleting
a folder, to check if anything in the parent folder depends on the  one we're deleting.

Projects do not exist. 

class Folder:
    __init__(name, folder)

    add(object)
    remove(object)
    clear()

    subfolders [property]
    items [property]

    save()
    load(element)

    getattr

Relation of folders to the file system?

- Folders are only internal to projects?
- Folders _are_ directories with a special grafit.dir file? (but can be zipped?)


class ui.MainWindow:
    statusbar_message(str, time)
    progressbar_set(progress)

Plot: a single plot, containing:
    plot has min, max, scale
    Axis: an axis. draws tics, title, numbers
          There are 2 axes: x_axis, y_axis
          There are four axes: axis_top, axis_bottom, axis_left, axis_right.
    Curve: draws a dataset. Has x[], y[], style, range
    Grid: there is grid_x, grid_y
